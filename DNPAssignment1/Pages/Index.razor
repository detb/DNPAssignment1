@page "/"
@using DNPAssignment1.Data
@using global::Models
@inject IFamilyService CloudFamilyService
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@inject IstatisticsService StatisticsService

<AuthorizeView>
    @if (allFamilies == null)
    {
        <h1>loading..</h1>
    }
    else
    {
        <h2>Families breakdown</h2>
        <div class="charts--container">
            <section>
                <h4>@allFamilies.Count families in system</h4>
                <div class="pieID pie">

            </div>
            <ul class="pieID legend">
                <li>
                    <em>Adults</em>
                    <span>@allAdults()</span>
                </li>
                <li>
                    <em>Children</em>
                    <span>@allChildren()</span>
                </li>
                <li>
                    <em>Pets</em>
                    <span>@allPets()</span>
                </li>
            </ul>
            <div class="avgCont">
                Average male
                <p>Age: <span>@StatisticsService.avgAge("m")</span></p>
                <p>Height: <span>@StatisticsService.avgHeight("m")</span></p>
                <p>Weight: <span>@StatisticsService.avgWeight("m")</span></p>
                <p>Gender: <span>@StatisticsService.avgGender("m")</span></p>
                <p>Hair: <span>@StatisticsService.avgHair("m")</span></p>
                <p>Eye-color: <span>@StatisticsService.avgEye("m")</span></p>
                <p>Job: <span>@StatisticsService.avgJob("m")</span></p>
            </div>
            <div class="avgCont">
                Average female
                <p>Age: <span>@StatisticsService.avgAge("f")</span></p>
                <p>Height: <span>@StatisticsService.avgHeight("f")</span></p>
                <p>Weight: <span>@StatisticsService.avgWeight("f")</span></p>
                <p>Gender: <span>@StatisticsService.avgGender("f")</span></p>
                <p>Hair: <span>@StatisticsService.avgHair("f")</span></p>
                <p>Eye-color: <span>@StatisticsService.avgEye("f")</span></p>
                <p>Job: <span>@StatisticsService.avgJob("f")</span></p>
            </div>
        </section>
    </div>

    <div class="familyContainer" id="familyContainer">
        @foreach (var family in allFamilies)
        {
            <div class="familyCard" @onclick="@(() => navigationManager.NavigateTo($"/FamilyEdit/{@family.StreetName}-{@family.HouseNumber}"))">
                <p class="addr">@family.StreetName @family.HouseNumber</p>
                <p class="memb">Members: @NoFamilyMembers(family)</p>
                <div class="memberCont">
                    @if (family.Adults.Count > 0)
                    {
                        <div class="adultDisplay">
                            @if (family.Adults.Count > 1)
                            {<p> x @family.Adults.Count</p>}
                        </div>
                    }
                    @if (family.Children.Count > 0)
                    {
                        <div class="childDisplay">
                            @if (family.Children.Count > 1)
                            {<p> x @family.Children.Count</p>}
                        </div>
                    }
                    @if (family.Pets.Count > 0)
                    {
                        <div class="petDisplay">
                            @if (family.Pets.Count > 1)
                            {<p> x @family.Pets.Count</p>}
                        </div>
                    }
                </div>
            </div>
        }
    </div>
    }
</AuthorizeView>



@code{
    private IList<Family> allFamilies ;
    private IList<Family> familiesToShow;


    protected override async Task OnInitializedAsync()
    {
        allFamilies = await CloudFamilyService.GetFamiliesAsync();
        familiesToShow = allFamilies;
        StatisticsService.setFamily(allFamilies);
        await renderChart();
    }

    async Task renderChart()
    {
        System.Console.WriteLine("renderChart");
        await jsRuntime.InvokeVoidAsync("renderPie");
    }

    private int NoFamilyMembers(Family family)
    {
        int i = 0;
        i += family.Adults.Count;
        i += family.Children.Count;
        return i;
    }

    public int allAdults()
    {
        int i = 0;

        foreach (var f in allFamilies)
        {
            i += f.Adults.Count;
        }

        return i;
    }
    public int allChildren()
    {
        int i = 0;

        foreach (var f in allFamilies)
        {
            i += f.Children.Count;
        }

        return i;
    }
    public int allPets()
    {
        int i = 0;

        foreach (var f in allFamilies)
        {
            i += f.Pets.Count;
        }

        return i;
    }
}
