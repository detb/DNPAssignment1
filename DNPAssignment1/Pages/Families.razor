@page "/Families"
@using DNPAssignment1.Data
@using global::Models
@attribute [Authorize(Policy = "SecurityLevel2")]
@inject IFamilyService FamilyService
@inject IJSRuntime JsRuntime
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager


<h3>Families</h3>
@if (allFamilies == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!allFamilies.Any())
{
    <p>
        <em>No families exist. Please add some.</em>
    </p>
}
else
{
<p>
    <input type="text" @oninput="@((arg) => FilterByUserId(arg))" />
    <br />
    Filter:<br /> 
    Address:<input type="checkbox" checked="@filterAddr" @onchange="@(e => OnUpdated(1, e))" />   |   
    Adults:<input type="checkbox" checked="@filterAdult" @onchange="@(e => OnUpdated(2, e))"  />   |   
    Children:<input type="checkbox" checked="@filterChild" @onchange="@(e => OnUpdated(3, e))" />   |   
    Pets:<input type="checkbox" checked="@filterPet" @onchange="@(e => OnUpdated(4, e))" />   |   
    Jobs:<input type="checkbox" checked="@filterJob" @onchange="@(e => OnUpdated(5, e))" />   |  
    Interest:<input type="checkbox" checked="@filterIntrest" @onchange="@(e => OnUpdated(6, e))" />
</p>
    <table class="table">
        <thead>
            <tr>
                <th>Address</th>
                <th>Adult(s)</th>
                <th>No of Members</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in familiesToShow)
            {
                <tr class="families">
                    <td class="clk" @onclick="@(() => navigationManager.NavigateTo($"/FamilyEdit/{@item.StreetName}-{@item.HouseNumber}"))">@item.StreetName @item.HouseNumber</td>
                    <td>@GetAdults(item)</td>
                    <td>@NoFamilyMembers(item)</td>
                    <td>
                        <button class="clk removeFam" @onclick="@(() => RemoveFamily(item.StreetName, item.HouseNumber))">
                            <i class="oi oi-trash" />
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IList<Family> allFamilies;
    private IList<Family> familiesToShow;
    private string? filterByAddr;
    private bool filterAddr = true, filterAdult = true, filterChild = true, filterPet = true, filterJob = true, filterIntrest = true;


    protected override async Task OnInitializedAsync()
    {
        allFamilies = FamilyService.GetFamilies();
        familiesToShow = FamilyService.GetFamilies();
    }

    private void RemoveFamily(string streetName, int houseNumber)
    {
        Family toRemove = allFamilies.First(f => (f.StreetName == streetName && f.HouseNumber == houseNumber));
        FamilyService.RemoveFamily(streetName, houseNumber);
        allFamilies.Remove(toRemove);
        familiesToShow.Remove(toRemove);
    }

    private int NoFamilyMembers(Family family)
    {
        int i = 0;
        i += family.Adults.Count;
        i += family.Children.Count;
        return i;
    }
    private string GetAdults(Family family)
    {
        string str = "";
        for (int i = 0; i < family.Adults.Count; i++)
        {
            str += " " + family.Adults[i].FirstName + " " + family.Adults[i].LastName;
            if (i < family.Adults.Count - 1)
            {
                str += ",";
            }
        }
        return str;
    }
    private void FilterByUserId(ChangeEventArgs changeEventArgs)
    {
        try
        {
            FilterByUserId(changeEventArgs.Value.ToString());
        }
        catch (Exception e) { }
    }
    private void FilterByUserId(string sortId)
    {
        filterByAddr = null;
        try
        {
            filterByAddr = sortId;
        }
        catch (Exception e) { }
        ExecuteFilter();
    }
    private void ExecuteFilter()
    {
        familiesToShow = allFamilies.Where(t => (((t.StreetName.ToLower() + " " + t.HouseNumber).Contains(filterByAddr.ToLower())) && filterAddr)
        || (t.containsAdult(filterByAddr.ToLower()) && filterAdult)
        || (t.containsChild(filterByAddr.ToLower()) && filterChild)
        || (t.containsPet(filterByAddr.ToLower()) && filterPet)
        || (t.containsJob(filterByAddr.ToLower()) && filterJob)
        || (t.containsIntrest(filterByAddr.ToLower()) && filterIntrest)).ToList();
    }

    public void OnUpdated(int flt, ChangeEventArgs e)
    {
        switch (flt)
        {
            case 1: filterAddr = !filterAddr; break;
            case 2: filterAdult = !filterAdult; break;
            case 3: filterChild = !filterChild; break;
            case 4: filterPet = !filterPet; break;
            case 5: filterJob = !filterJob; break;
            case 6: filterIntrest = !filterIntrest; break;
        }
        if(filterByAddr != null)
            ExecuteFilter();
    }
}
