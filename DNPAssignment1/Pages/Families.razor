@page "/Families"
@using DNPAssignment1.Data
@using global::Models
@attribute [Authorize(Policy = "SecurityLevel2")]
@inject IFamilyService FamilyService


<h3>Families</h3>
@if (allFamilies == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!allFamilies.Any())
{
    <p>
        <em>No families exist. Please add some.</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Streetname</th>
            <th>Housenumber</th>
            <th>No of Members</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in familiesToShow)
        {
            <tr>
                <td>@item.StreetName</td>
                <td>@item.HouseNumber</td>
                <td>@NoFamilyMembers(item)</td>
                <td>
                    <button @onclick="@(() => RemoveFamily(item.StreetName, item.HouseNumber))">
                        <i class="oi oi-trash" style="color:#ff0000"/>
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private IList<Family> allFamilies;
    private IList<Family> familiesToShow;

        
    protected override async Task OnInitializedAsync()
    {
        allFamilies = FamilyService.GetFamilies();
        familiesToShow = FamilyService.GetFamilies();
    }

    private void RemoveFamily(string streetName, int houseNumber)
    {
        Family toRemove = allFamilies.First(f => (f.StreetName == streetName && f.HouseNumber == houseNumber));
        FamilyService.RemoveFamily(streetName, houseNumber);
        allFamilies.Remove(toRemove);
        familiesToShow.Remove(toRemove);
    }

    private int NoFamilyMembers(Family family)
    {
        int i = 0;
        i += family.Adults.Count;
        i += family.Children.Count;
        return i;
    }
}
