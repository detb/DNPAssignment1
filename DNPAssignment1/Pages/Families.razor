@page "/Families"
@using DNPAssignment1.Data
@using global::Models
@attribute [Authorize(Policy = "SecurityLevel2")]
@inject IFamilyService FamilyService
@inject IJSRuntime JsRuntime
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager


<h3>Families</h3>
@if (allFamilies == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!allFamilies.Any())
{
    <p>
        <em>No families exist. Please add some.</em>
    </p>
}
else
{
    <p>
        Filter by Addres, adults, children or pets: <br /> 
        <input type="text" @oninput="@((arg) => FilterByUserId(arg))" />
    </p>
    <table class="table">
        <thead>
            <tr>
                <th>Address</th>
                <th>Adult(s)</th>
                <th>No of Members</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in familiesToShow)
            {
                <tr class="families">
                    <td class="clk" @onclick="@(() => navigationManager.NavigateTo($"/FamilyEdit/{@item.StreetName}-{@item.HouseNumber}"))">@item.StreetName @item.HouseNumber</td>
                    <td>@GetAdults(item)</td>
                    <td>@NoFamilyMembers(item)</td>
                    <td>
                        <button class="clk removeFam" @onclick="@(() => RemoveFamily(item.StreetName, item.HouseNumber))">
                            <i class="oi oi-trash" />
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IList<Family> allFamilies;
    private IList<Family> familiesToShow;
    private string? filterByAddr;

    protected override async Task OnInitializedAsync()
    {
        allFamilies = FamilyService.GetFamilies();
        familiesToShow = FamilyService.GetFamilies();
    }

    private void RemoveFamily(string streetName, int houseNumber)
    {
        Family toRemove = allFamilies.First(f => (f.StreetName == streetName && f.HouseNumber == houseNumber));
        FamilyService.RemoveFamily(streetName, houseNumber);
        allFamilies.Remove(toRemove);
        familiesToShow.Remove(toRemove);
    }

    private int NoFamilyMembers(Family family)
    {
        int i = 0;
        i += family.Adults.Count;
        i += family.Children.Count;
        return i;
    }
    private string GetAdults(Family family)
    {
        string str = "";
        for (int i = 0; i < family.Adults.Count; i++)
        {
            str += " " + family.Adults[i].FirstName + " " + family.Adults[i].LastName;
            if (i < family.Adults.Count - 1)
            {
                str += ",";
            }
        }
        return str;
    }
    private void FilterByUserId(ChangeEventArgs changeEventArgs)
    {
        try
        {
            FilterByUserId(changeEventArgs.Value.ToString());
        }
        catch (Exception e) { }
    }
    private void FilterByUserId(string sortId)
    {
        filterByAddr = null;
        try
        {
            filterByAddr = sortId;
        }
        catch (Exception e) { }
        ExecuteFilter();
    }
    private void ExecuteFilter()
    {
        familiesToShow = allFamilies.Where(t => ((t.StreetName.ToLower() + " " + t.HouseNumber).Contains(filterByAddr.ToLower())) 
        || t.containsAdult(filterByAddr.ToLower())
        || t.containsChild(filterByAddr.ToLower())
        || t.containsPet(filterByAddr.ToLower())).ToList();
    }
}
